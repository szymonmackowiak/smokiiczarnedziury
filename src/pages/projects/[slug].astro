---
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "../../components/layout.astro";
import Tag from "../../components/tag.astro";
import Slogan from "../../components/slogan.astro";

// MDX Components
import PostContent from "../../components/post/post-content.astro";
import { CollectionType } from "../../types";

type Projects = CollectionEntry<CollectionType.Projects>;
export async function getStaticPaths() {
  const projects = await getCollection(CollectionType.Projects);
  return projects.map((project) => {
    const slug = project.slug;
    return {
      params: { slug },
      props: { project },
    };
  });
}

type Props = {
  project: Projects;
};

const { project } = Astro.props;

const cover = project.data.cover ?? "";
const isCoverObject = typeof cover === "object" && cover?.src;
const coverSrc = isCoverObject ? `${cover.src}` : `${cover}`;
---

<Layout title={project.data.title} description={project.data.description}>
  <div class="flex flex-col gap-8 md:w-5/6 px-4 py-12 sm:px-8 mx-auto">
    <div class="flex flex-col gap-6 items-center justify-center max-w-screen-sm mx-auto">
      <h1 id="header" class="text-5xl text-center font-title font-black text-white">{project.data.title}</h1>
      <p class="text-lg text-center text-white max-w-[576px]">{project.data.description}</p>
    </div>
    {coverSrc && <img src={coverSrc} alt={project.data.title} class="w-auto mx-auto rounded-lg max-h-96" />}
  </div>
  <div
    class="relative flex flex-col gap-3 max-w-screen-md mx-auto px-4 sm:px-6 text-xl leading-relaxed text-white bg-neutral-900/90 rounded-lg"
  >
    <PostContent post={project} />
  </div>
  <Slogan atBottom />
</Layout>

<script>
  import { annotate, annotationGroup } from "rough-notation";
  const notions = document.querySelectorAll("span[data-notion-identity]");
  const annotations = new Array(notions.length).fill(0).map((_, index) => {
    const node = notions[index] as HTMLSpanElement;
    const type = node.dataset.notionType;
    const color = node.dataset.notionColor;
    const strokeWidth = node.dataset.notionStrokewidth;
    return annotate(node, {
      type: (type as "underline") ?? "underline",
      color: color ?? "red",
      animate: false,
      multiline: type === "bracket" ? false : true,
      brackets: ["left", "right"],
      strokeWidth: Number(strokeWidth) ?? 1.5,
    });
  });
  annotationGroup(annotations).show();
</script>
